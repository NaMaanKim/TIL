Cookie : 효율적이고 안전한 웹 사용을 위해 사용자의 웹 사이트에 저장되는 소량의 정보이다.
일반적으로 쿠키는 사용자가 해당 웹 사이트를 방문할 때마다 그 사용자를 "기억"하는 등 사용자의 편의를 위해 작용된다.
쿠키는 이름과 값을 갖는데 이름의 경우 헤더에 문자열을 보내기 때문에 너무 긴 문자열은 보낼 수 없다.

Session : 클라이언트와 웹 서버간에 네트워크 연결이 지속적으로 유지되고 있는 상태.
클라이언트와 웹서버 간의 통신 연결에서 두 개체의 활성화된 접속을 뜻한다.
클라이언트가 웹서버에 요청하여 처음 접속하면 JSP나 ASP엔진은 클라이언트에 대해 ID를 부여하게 되는데 이 ID를 세션ID라 한다.
세션ID를 임시로 저장하여 페이지 이동 시 이용하거나, 클라이언트가 재접속 했을 때 클라이언트를 구분할 수 있는 유일한 수단이 된다.
세션은 Key와 Value값을 갖는데 Key에는 세션ID가 들어가고 Value에는 사용자의 고유의 값(Oject)를 갖는다.

Servlet Life Cycle : 브라우저가 서블릿을 요청하면 바로 호출되지 않고 서블릿 객체를 생성하고 초기화한 뒤에 요청을 처리하게 된다.
이러한 과정을 서블릿 생명주기(Servlet Life Cycle)이라고 부른다.
1.브라우저로 부터 요청이 오면 Servlet클래스가 요청에 대한 Servlet객체가 생성된다.
2.서버는 init()메소드를 호출해서 Servlet을 초기화한다.
3.Service()메소드를 호출해서 Servlet이 브라우저의 요청을 처리하도록 한다.
4.Service()메소드는 특정 HTTP요정(Get,Post...)을 처리하는 메소드 (doGet(), doPost(),...)를 호출한다.
5.서버는 Destroy()메소드를 호출하여 Servlet을 제거한다.

MVC Model 1구조 
View와 JSP페이지를 하나에서 처리하는 구조를 말함.

Browser --(Request)--> Web Container[ (View + JSP) + (JavaBeans) ] --> Data
Browser <--(Response)-- Web Container[ (View + JSP) + (JavaBeans) ] <-- Data

장점 : 구조가 단순하여 익히기 쉽다.
단점 : 출력을 위한 뷰 코드와 로직 처리를 위한 자바 코드가 함께 섞이기 때문에 JSP코드 자체가 복잡해져 유지보수가 어렵다.
JSP코드에서 백엔드와 프론트엔드가 혼재되어 분업이 용이하지 않다.

MVC Model 2구조
모든 처리를 JSP페이지 하나에 처리하는 1구조와 달리 JSP페이지와 서블릿, 로직을 위한 클래스가 나뉘어 브라우저의 요청을 기다린다.

Browser --(Request--> Web Container[ Action Servlet(Controller) --> JSP(View) <---> JavaBeans ] <----> Data

요청이 들어오면 요청에 대한 로직 처리는 이를 처리할 모델인 서비스 혹은 자바빈이 담당하고, 요청 결과는 유저에게 결과를 보여줄 뷰(View)
JSP에 출력되며, 이를 위한 모든 흐름제어는 Controller인 서블릿에서 담당한다.

장점 : 각각 나누기 때문에 1구조에 비해 코드가 복잡하지않다.
뷰, 로직 처리에 대한 분업이 가능하다.
기능에 따라 분리되어 있기 때문에 유지보수가 용이하다.
단점  : 구조가 복잡하여 습득이 어렵고 작업량이 많다.
