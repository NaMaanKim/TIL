package StudyServer;

public class Main {
    public static void main(String [] args){
        ChatServer chatServer = new ChatServer(11111);
        chatServer.start();
    }
}

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
package StudyServer;

import java.io.IOException;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Set;
import java.util.concurrent.CopyOnWriteArraySet;

public class ChatServer extends Thread{
    private int port;
    private Set<PrintWriter> socketSet;


    public ChatServer(int port){
        this.port = port;
        this.socketSet = new CopyOnWriteArraySet<>();

    }
    public void addPrintWriter(PrintWriter out){
        socketSet.add(out);
    }
    public void removePrintWriter(PrintWriter out){
        socketSet.remove(out);
    }
    public void broadcast(String msg){
        for(PrintWriter out : socketSet){
            try {
                out.println(msg);
                out.flush();
            }catch (Exception e){}
            }
    }
    @Override
    public void run(){
        System.out.println("ChatServer start!");
        ServerSocket serverSocket = null;
        try{
            serverSocket = new ServerSocket(port);

            while(true) {
                Socket socket = serverSocket.accept();
                SocketHandler handler = new SocketHandler(this, socket);
                handler.start();

            }

        }catch (IOException ex){
            ex.printStackTrace();
        }finally {
            try{serverSocket.close();}catch (Exception ex){ }
        }
    }
}
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
package StudyServer;

import java.io.*;
import java.net.Socket;

public class SocketHandler extends Thread{
    private ChatServer chatServer;
    private Socket socket;
    private String name;

    public SocketHandler(ChatServer chatServer, Socket socket){
        this.chatServer = chatServer;
        this.socket = socket;
    }
    @Override
    public void run(){
        BufferedReader in = null;
        PrintWriter out = null;
        try{
            in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            out = new PrintWriter(new OutputStreamWriter(socket.getOutputStream()));

            this.name = in.readLine();
            chatServer.broadcast(this.name + "님이 입장하셨습니다.");
            chatServer.addPrintWriter(out);

            String line = null;
            while((line = in.readLine()) != null){
                chatServer.broadcast(this.name + " : " + line);

            }

         }catch (Exception ex){
            ex.printStackTrace();
        }finally {
            chatServer.removePrintWriter(out);
            chatServer.broadcast(this.name + "님이 퇴장하셨습니다.");
            System.out.println("ChatServer Handler close");
            try{in.close(); } catch (Exception ex){}
            try{out.close(); } catch (Exception ex){}
        }
   }

}
