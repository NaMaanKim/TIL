package my.exaples.miniwasStudy;

public class Main {
    public static void main(String[] args) {
        MiniWAS was = new MiniWAS();
        was.start();
        System.out.println("WAS 시작~");
    }
}
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
package my.exaples.miniwasStudy;

public class MiniWAS extends Thread{


    @Override
    public void run(){
        Connector connector = new Connector(8888);
        connector.run();
    }

}
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
package my.exaples.miniwasStudy;

import java.net.ServerSocket;
import java.net.Socket;

public class Connector {
    private int port;

    public Connector(int port){
        this.port = port;

    }
    public void run(){
        ServerSocket serverSocket = null;
        try{
            while(true) {
                serverSocket = new ServerSocket(port);
                Socket socket = serverSocket.accept();
                Handler handler = new Handler(socket);
                handler.start();

            }


        }catch (Exception ex){

        }finally {
            try{serverSocket.close();}catch (Exception ex){}
        }

    }
}
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
package my.exaples.miniwasStudy;

import java.io.*;
import java.net.Socket;

public class Handler extends Thread{
    private Socket socket;
    public Handler(Socket socket){
        this.socket = socket;
    }
    @Override
    public void run(){
        InputStream in = null;
        BufferedReader br = null;
        OutputStream out = null;
        PrintWriter pw = null;
        try{
            in = socket.getInputStream();
            br = new BufferedReader(new InputStreamReader(in));

            out = socket.getOutputStream();
            pw = new PrintWriter(new OutputStreamWriter(out));

            Request request = new Request(in,br);
            Response response = new Response(out,pw);

            DefaultServlet defaultServlet = new DefaultServlet();
            defaultServlet.service(request,response);

        }catch (Exception ex){
            ex.printStackTrace();
        }finally {
                try{in.close();}catch (Exception ex){}
            try{br.close();}catch (Exception ex){}
            try{out.close();}catch (Exception ex){}
            try{pw.close();}catch (Exception ex){}
        }
    }
}

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
package my.exaples.miniwasStudy;

import java.io.BufferedReader;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;

public class Request {
    private InputStream in;
    private BufferedReader br;
    private Map<String, String> headers;
    private String method;
    private String path;

    public Request(InputStream in, BufferedReader br){
        this.in = in;
        this.br = br;
        this.headers = new HashMap<>();

        try{
            String requestLine = br.readLine();
            String [] split = requestLine.split(" ");
            if(split.length > 2){
                method = split[0];
                path = split[1];
            }
            String headerLine = null;
            while((headerLine = br.readLine()) != null){
                if(headerLine.equals(""))break;
                String[] headerArr = headerLine.split(":");
                String key = headerArr[0];
                String value = headerArr[1];
                headers.put(key, value);
            }



        }catch (Exception ex){
           throw new RuntimeException("잘못된 요청" + ex.toString());
        }finally {
            System.out.println("안닫힘");
        }

    }

    public InputStream getIn() {
        return in;
    }

    public BufferedReader getBr() {
        return br;
    }

    public Map<String, String> getHeaders() {
        return headers;
    }

    public String getMethod() {
        return method;
    }

    public String getPath() {
        return path;
    }
    public String getUserAgent(){
        return headers.get("User-Agent");
    }
    public String getCookie(){
        return headers.get("Cookie");

    }
    public String getAccept(){
        return headers.get("Accept");
    }
}
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
package my.exaples.miniwasStudy;

import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;

public class Response {
    private OutputStream out;
    private PrintWriter pw;
    private String contentType;
    private long contentLength;
    private int statuscode;
    private String statusMessage;

    public Response(OutputStream out,PrintWriter pw){
        this.out = out;
        this.pw = pw;
    }

    public OutputStream getOut() {
        return out;
    }

    public void setOut(OutputStream out) {
        this.out = out;
    }

    public PrintWriter getPw() {
        return pw;
    }

    public void setPw(PrintWriter pw) {
        this.pw = pw;
    }

    public String getContentType() {
        return contentType;
    }

    public void setContentType(String contentType) {
        this.contentType = contentType;
    }

    public long getContentLength() {
        return contentLength;
    }

    public void setContentLength(long contentLength) {
        this.contentLength = contentLength;
    }

    public int getStatuscode() {
        return statuscode;
    }

    public void setStatuscode(int statuscode) {
        this.statuscode = statuscode;
    }

    public String getStatusMessage() {
        return statusMessage;
    }

    public void setStatusMessage(String statusMessage) {
        this.statusMessage = statusMessage;
    }
}

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
package my.exaples.miniwasStudy;

import java.io.File;
import java.io.FileInputStream;
import java.io.OutputStream;
import java.io.PrintWriter;

public class DefaultServlet {
    private OutputStream out;
    private PrintWriter pw;
    private String url = "C://index.html";

    public void service(Request request, Response response){

//        String webPath = request.getPath();
//        if("//".equals(url)) {
//            webPath = webPath + "index.html;
//        }
            File file = new File("C://index.html");

            OutputStream out = response.getOut();
            PrintWriter pw = response.getPw();

            if (file.exists()) {
                pw.println("HTTP/1.1 200 OK");
                pw.println("Content-Type: text/html; charset=UTF-8");
                pw.println("Content-Length: " + file.length());
                pw.println("");
                pw.flush();


            FileInputStream fis = null;
            try {
                fis = new FileInputStream(file);
                byte[] buffer = new byte[1024];
                int readcount = 0;
                while ((readcount = fis.read(buffer)) != -1) {
                    out.write(buffer, 0, readcount);
                    out.flush();
                }

            } catch (Exception ex) {
                ex.printStackTrace();
            } finally {

                try {fis.close();} catch (Exception ex) {}

            }
        }else{
            pw.println("HTTP/1.1 404 NOT FOUND");
            pw.println("Content-Type: text/html; charset=UTF-8");
            pw.println(" ");
            pw.flush();
        }

    }
}
